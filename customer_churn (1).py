# -*- coding: utf-8 -*-
"""CUSTOMER CHURN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vm7K9FQvZn6GaL4FR6wA9QSE1pHWZIMD
"""

#importing essential libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# ignore the warnings
import warnings
warnings.filterwarnings("ignore")

import io
#Reading the dataset
data = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')
#Printing the dataset
print(data)

# display the first few rows of the DataFrame
print(data.head())

# display the last few rows of the DataFrame
print(data.tail())

# displaying the shape of the data
print(data.shape)

# Describing the dataset
print(data.describe())

"""# Performing Exploratory data analysis"""

# Converting 'Yes' and 'No' to 1 and 0 in categorical columns
categorical_columns= ['PhoneService', 'PaperlessBilling', 'Churn']
data[categorical_columns] = data[categorical_columns].replace({'Yes': 1, 'No': 0})
# Displaying the updated dataset
print(data.head())

# checking for missing values
print(data.isnull().sum())

# checking for duplicate rows
print(data.duplicated().sum())

"""

```
# This is formatted as code
```

# Performing Exploratory data analysis"""

# Generating a bar plot using matplotlib
churn_counts = data['Churn'].value_counts()
plt.bar(churn_counts.index, churn_counts.values, color=['blue', 'orange'], width = [0.6, 0.4], edgecolor = 'black')
plt.title('Churn Distribution')
plt.xlabel('Churn')
plt.ylabel('Count')
plt.xticks(ticks=[0, 1], labels=['No', 'Yes'])
plt.show()

import matplotlib.pyplot as plt

# Calculate payment method counts
payment_counts = data['PaymentMethod'].value_counts()

# Define colors
colors = ['magenta', 'cyan', 'green', 'yellow']

# Plotting a pie chart
plt.figure(figsize=(8, 6))
plt.pie(payment_counts, labels=payment_counts.index, colors=colors, autopct='%1.1f%%', startangle=90, shadow=True)
plt.title('Payment Method Distribution')
plt.legend()
plt.show()

# Scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(data['tenure'], data['MonthlyCharges'], color='blue', alpha=0.5)
plt.title('Scatter Plot of Tenure vs Monthly Charges')
plt.xlabel('Tenure')
plt.ylabel('Monthly Charges')
plt.grid(True)
plt.show()

"""# Performing Machine Learning models

Logistic Regression
"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Assuming 'data' is your pandas DataFrame containing the dataset
# Let's say you want to predict 'Churn' based on other features

# Define features (X) and target variable (y)
X = data[['tenure', 'MonthlyCharges', 'SeniorCitizen']]  # Example features
y = data['Churn']  # Target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize logistic regression model
model = LogisticRegression(max_iter=1000)

# Fit the model on the training data
model.fit(X_train, y_train)

# Predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Classification report
print(classification_report(y_test, y_pred))

# Confusion matrix
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))

"""Decision Tree Classifier"""

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Assuming 'data' is your pandas DataFrame containing the dataset
# Let's say you want to predict 'Churn' based on other features

# Define features (X) and target variable (y)
X = data[['tenure', 'MonthlyCharges', 'SeniorCitizen']]  # Example features
y = data['Churn']  # Target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize decision tree classifier
model = DecisionTreeClassifier(random_state=42)

# Fit the model on the training data
model.fit(X_train, y_train)

# Predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Classification report
print(classification_report(y_test, y_pred))

# Confusion matrix
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))